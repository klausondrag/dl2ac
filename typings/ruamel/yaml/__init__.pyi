"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Any, Text

class YAML:
    def __init__(
        self: Any,
        *,
        typ: Text | list[Text] | None = ...,
        pure: Any = ...,
        output: Any = ...,
        plug_ins: Any = ...,
    ) -> None:
        """
        typ: 'rt'/None -> RoundTripLoader/RoundTripDumper,  (default)
             'safe'    -> SafeLoader/SafeDumper,
             'unsafe'  -> normal/unsafe Loader/Dumper (pending deprecation)
             'full'    -> full Dumper only, including python built-ins that are
                          potentially unsafe to load
             'base'    -> baseloader
        pure: if True only use Python modules
        input/output: needed to work as context manager
        plug_ins: a list of plug-in files
        """
        ...

    def load(self, stream: Path | Any) -> Any:
        """
        at this point you either have the non-pure Parser (which has its own reader and
        scanner) or you have the pure Parser.
        If the pure Parser is set, then set the Reader and Scanner, if not already set.
        If either the Scanner or Reader are set, you cannot use the non-pure Parser,
            so reset it to the pure parser and set the Reader resp. Scanner if necessary
        """
        ...

    def dump(
        self: Any,
        data: Path | Any,
        stream: Any = ...,
        *,
        transform: Any = ...,
    ) -> Any: ...
